from torchmetrics import PrecisionRecallCurve
from torchmetrics import ROC
from torchmetrics.classification import BinaryAccuracy
from sklearn.metrics import confusion_matrix
import numpy as np
import torch
from loguru import logger
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt
import pandas as pd
from pathlib import Path
from sklearn.metrics import precision_recall_curve, auc
from sklearn.metrics import PrecisionRecallDisplay


def test_pr_curve_sl():
    predict_socre = [0.413188099861145, 0.417450487613678, 0.4187154769897461, 0.4229429066181183, 0.42270034551620483, 0.41718557476997375, 0.49656736850738525, 0.40508073568344116, 0.4029553532600403, 0.40745478868484497, 0.42131736874580383, 0.4036545753479004, 0.43026137351989746, 0.4206814765930176, 0.4145503342151642, 0.42213931679725647, 0.43026003241539, 0.42974618077278137, 0.42590951919555664, 0.4156773090362549, 0.45888033509254456, 0.40415841341018677, 0.4197021424770355, 0.4381551742553711, 0.43878886103630066, 0.4306521713733673, 0.41476553678512573, 0.40619972348213196, 0.4481189548969269, 0.46074822545051575, 0.4221809208393097, 0.4310125708580017, 0.4350917339324951, 0.4401853680610657, 0.41975048184394836, 0.44117435812950134, 0.4033011794090271, 0.4372628331184387, 0.4200464189052582, 0.43378376960754395, 0.4063020348548889, 0.42085403203964233, 0.42855143547058105, 0.7116206288337708, 0.7772082090377808, 0.6826013326644897, 0.7058779001235962, 0.913270115852356, 0.6051245927810669, 0.7581161260604858, 0.6822928190231323, 0.7682294249534607, 0.6325726509094238, 0.6452690362930298, 0.6658458709716797, 0.6394726634025574, 0.7246180772781372, 0.6889413595199585, 0.6070797443389893, 0.6511566042900085, 0.7633609771728516, 0.6286962628364563, 0.6784865260124207, 0.7308156490325928, 0.6512963175773621, 0.6326042413711548, 0.6466916799545288, 0.5524629950523376, 0.6904349327087402, 0.5, 0.5820929408073425, 0.662819504737854, 0.5994002819061279, 0.5356939435005188, 0.5262262225151062, 0.6036237478256226, 0.5653207302093506, 0.5920611619949341, 0.6136853694915771, 0.6330053806304932, 0.6441186666488647, 0.6212290525436401, 0.6291258335113525, 0.5587553977966309, 0.6322634220123291, 0.5863341093063354, 0.6539123058319092, 0.5744266510009766, 0.5926441550254822, 0.6142745614051819]
    gt_label = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    precision, recall, thresholds = precision_recall_curve(np.array(gt_label), np.array(predict_socre))
    logger.info("precision {}, recall {}", precision, recall)
    logger.info("thresholds {}", thresholds)
    logger.info("len thresholds {}", len(thresholds))

def test_pr_curve():
    predict_socre = [0.413188099861145, 0.417450487613678, 0.4187154769897461, 0.4229429066181183, 0.42270034551620483, 0.41718557476997375, 0.49656736850738525, 0.40508073568344116, 0.4029553532600403, 0.40745478868484497, 0.42131736874580383, 0.4036545753479004, 0.43026137351989746, 0.4206814765930176, 0.4145503342151642, 0.42213931679725647, 0.43026003241539, 0.42974618077278137, 0.42590951919555664, 0.4156773090362549, 0.45888033509254456, 0.40415841341018677, 0.4197021424770355, 0.4381551742553711, 0.43878886103630066, 0.4306521713733673, 0.41476553678512573, 0.40619972348213196, 0.4481189548969269, 0.46074822545051575, 0.4221809208393097, 0.4310125708580017, 0.4350917339324951, 0.4401853680610657, 0.41975048184394836, 0.44117435812950134, 0.4033011794090271, 0.4372628331184387, 0.4200464189052582, 0.43378376960754395, 0.4063020348548889, 0.42085403203964233, 0.42855143547058105, 0.7116206288337708, 0.7772082090377808, 0.6826013326644897, 0.7058779001235962, 0.913270115852356, 0.6051245927810669, 0.7581161260604858, 0.6822928190231323, 0.7682294249534607, 0.6325726509094238, 0.6452690362930298, 0.6658458709716797, 0.6394726634025574, 0.7246180772781372, 0.6889413595199585, 0.6070797443389893, 0.6511566042900085, 0.7633609771728516, 0.6286962628364563, 0.6784865260124207, 0.7308156490325928, 0.6512963175773621, 0.6326042413711548, 0.6466916799545288, 0.5524629950523376, 0.6904349327087402, 0.5, 0.5820929408073425, 0.662819504737854, 0.5994002819061279, 0.5356939435005188, 0.5262262225151062, 0.6036237478256226, 0.5653207302093506, 0.5920611619949341, 0.6136853694915771, 0.6330053806304932, 0.6441186666488647, 0.6212290525436401, 0.6291258335113525, 0.5587553977966309, 0.6322634220123291, 0.5863341093063354, 0.6539123058319092, 0.5744266510009766, 0.5926441550254822, 0.6142745614051819]
    gt_label = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    pr_curve = PrecisionRecallCurve(task="binary")
    pred_confidence = torch.Tensor(predict_socre)
    target = torch.Tensor(gt_label).to(torch.int)
    precision, recall, thresholds = pr_curve(pred_confidence, target)
    logger.info("precision {}, recall {}", precision, recall)
    logger.info("thresholds {}", thresholds)
    
    
if __name__ == '__main__':
    # test_pr_curve()
    test_pr_curve_sl()